name: Publish to pub.dev

# This workflow publishes to pub.dev when a GitHub release is created
# Key improvements:
# 1. Version extracted from GitHub release tag (not pubspec.yaml)
# 2. pubspec.yaml updated dynamically from tag
# 3. Validates version doesn't already exist on pub.dev
# 4. Only triggered by releases, not manual dispatch
# 
# Process:
# 1. Create GitHub release with version tag (e.g., v2.0.16)
# 2. This workflow triggers automatically
# 3. Extracts version from tag, updates pubspec.yaml
# 4. Validates and publishes to pub.dev

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag (e.g., v2.0.16)'
        required: true
        type: string
      
jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      issues: write
      pull-requests: write
    steps:
      - name: Clone repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false
          token: ${{ secrets.BOT_GITHUB_TOKEN }}
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: master
          flutter-version: 3.29.3
          cache: false 
      - name: Validate release tag exists
        run: |
          TAG="${{ inputs.release_tag }}"
          if ! git rev-parse --verify "refs/tags/$TAG" >/dev/null 2>&1; then
            echo "❌ Release tag $TAG does not exist!"
            echo "Please create the GitHub release first before running this workflow."
            exit 1
          fi
          echo "✅ Release tag $TAG exists"
      
      - name: Extract version from release tag
        id: extract-version
        run: |
          TAG_VERSION="${{ inputs.release_tag }}"
          VERSION="${TAG_VERSION#v}"
          echo "Extracting version from release tag: $TAG_VERSION -> $VERSION"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Validate version format
        run: |
          VERSION="${{ steps.extract-version.outputs.version }}"
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\.\-]+)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z or X.Y.Z-suffix"
            exit 1
          fi
          echo "✅ Version format valid: $VERSION"

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.BOT_GPG_PRIVATE_KEY }}
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_tag_gpgsign: true
          git_config_global: true
          git_committer_name: axeptio-bot
          git_committer_email: ${{ secrets.BOT_EMAIL }}
      
      - name: Configure Git for signed commits
        run: |
          git config --global commit.gpgsign true
          git config --global tag.gpgsign true
          git config --global user.signingkey ${{ steps.import_gpg.outputs.keyid }}
          git config --global gpg.program "$(which gpg)"
          git remote set-url origin https://x-access-token:${{ secrets.BOT_GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          
          # Ensure we're on master branch with proper upstream tracking
          git checkout -B master
          git branch --set-upstream-to=origin/master master

      - name: Check if version exists on pub.dev
        run: |
          VERSION="${{ steps.extract-version.outputs.version }}"
          echo "Checking if version $VERSION already exists on pub.dev..."
          
          HTTP_CODE=$(curl -s -w "%{http_code}" -o /dev/null "https://pub.dev/api/packages/axeptio_sdk/versions/$VERSION")
          if [ "$HTTP_CODE" = "200" ]; then
            echo "❌ Version $VERSION already exists on pub.dev!"
            echo "Cannot publish duplicate version. Please create a new release with a different version."
            exit 1
          elif [ "$HTTP_CODE" = "404" ]; then
            echo "✅ Version $VERSION available for publishing"
          else
            echo "⚠️ Could not verify version availability (HTTP $HTTP_CODE)"
            echo "Proceeding with caution..."
          fi

      - name: Update pubspec.yaml with release version
        run: |
          VERSION="${{ steps.extract-version.outputs.version }}"
          echo "Updating pubspec.yaml from release tag version: $VERSION"
          
          # Backup original pubspec.yaml
          cp pubspec.yaml pubspec.yaml.backup
          
          # Update version in pubspec.yaml
          sed -i "s/version: .*/version: $VERSION/" pubspec.yaml
          
          echo "✅ Updated pubspec.yaml to version: $VERSION"
          echo "Changes:"
          diff pubspec.yaml.backup pubspec.yaml || true

      - name: Generate Changelog
        id: changelog
        uses: TriPSs/conventional-changelog-action@v6
        with:
          github-token: ${{ secrets.BOT_GITHUB_TOKEN }}
          git-user-name: axeptio-bot
          git-user-email: ${{ secrets.BOT_EMAIL }}
          skip-version-file: true
          skip-commit: true
          skip-tag: true
          git-push: false
          output-file: 'CHANGELOG.md'
          version: ${{ steps.extract-version.outputs.version }}

      - name: Commit Changelog and Version Update
        if: steps.changelog.outputs.skipped != 'true'
        run: |
          VERSION="${{ steps.extract-version.outputs.version }}"
          
          # Restore git config after changelog action changes it
          git config --global user.name "axeptio-bot"
          git config --global user.email "${{ secrets.BOT_EMAIL }}"
          git config --global commit.gpgsign true
          
          # Add and commit both pubspec.yaml and CHANGELOG.md
          git add pubspec.yaml CHANGELOG.md
          git commit -S -m "chore(release): v$VERSION [skip ci]
          
          📦 Automated release preparation:
          - Updated pubspec.yaml to v$VERSION
          - Generated CHANGELOG.md from conventional commits"
          
          # Push the changes
          git push origin HEAD:master
          
          echo "✅ Committed and pushed version update and changelog"

      - name: Install dependencies
        run: flutter pub get
      - name: Analyze
        run: flutter analyze
      - name: Run tests
        run: flutter test
      
      - name: Check Publish Warnings
        run: |
          VERSION="${{ steps.extract-version.outputs.version }}"
          echo "Running dry-run publish for version: $VERSION"
          dart pub publish --dry-run

      - name: Publish to pub.dev
        uses: k-paxian/dart-package-publisher@v1.6
        with:
            accessToken: ${{ secrets.PUB_DEV_PUBLISH_ACCESS_TOKEN }}
            refreshToken: ${{ secrets.PUB_DEV_PUBLISH_REFRESH_TOKEN }}
            flutter: true
            skipTests: true

      - name: Publish Summary
        run: |
          VERSION="${{ steps.extract-version.outputs.version }}"
          {
            echo "## 📦 Stable Release Summary"
            echo "✅ Version **v$VERSION** published successfully to pub.dev!"
            echo ""
            echo "### Release Information"
            echo "- **Tag**: ${{ inputs.release_tag }}"
            echo "- **Version**: $VERSION"
            echo "- **Triggered by**: Manual Workflow Dispatch"
            echo ""
            echo "### For Users"
            echo '```yaml'
            echo "dependencies:"
            echo "  axeptio_sdk: $VERSION"
            echo '```'
            echo ""
            echo "### Process"
            echo "✅ Version extracted from GitHub release tag"
            echo "✅ pubspec.yaml updated dynamically"
            echo "✅ Version availability verified on pub.dev"
            echo "✅ Published to pub.dev successfully"
          } >> "$GITHUB_STEP_SUMMARY"
