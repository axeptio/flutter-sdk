name: Dry-run Publish to pub.dev

# This workflow performs a dry-run publish validation using a specified release tag
# Use this to test package publishing before running the actual publish workflow
# Both workflows use identical logic for consistency

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag to validate (e.g., v2.0.16, or leave empty for latest)'
        required: false
        type: string
      
jobs:
  dry-run-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Determine release tag
        id: determine-tag
        run: |
          if [ -n "${{ github.event.inputs.release_tag }}" ]; then
            TAG_VERSION="${{ github.event.inputs.release_tag }}"
            echo "Using specified release tag: $TAG_VERSION"
          else
            # Get latest release if no tag specified
            TAG_VERSION=$(gh release list --limit 1 --json tagName --jq '.[0].tagName')
            echo "Using latest release tag: $TAG_VERSION"
          fi
          echo "tag=$TAG_VERSION" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clone repository
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.determine-tag.outputs.tag }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract version from release tag
        id: extract-version
        run: |
          TAG_VERSION="${{ steps.determine-tag.outputs.tag }}"
          VERSION="${TAG_VERSION#v}"
          echo "Extracting version from release tag: $TAG_VERSION -> $VERSION"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          
      - name: Verify release exists
        run: |
          TAG_VERSION="${{ steps.determine-tag.outputs.tag }}"
          if ! gh release view "$TAG_VERSION" >/dev/null 2>&1; then
            echo "❌ Release $TAG_VERSION does not exist!"
            echo "Available releases:"
            gh release list --limit 5
            exit 1
          fi
          echo "✅ Release $TAG_VERSION exists and will be validated"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Validate version format
        run: |
          VERSION="${{ steps.extract-version.outputs.version }}"
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\.\-]+)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z or X.Y.Z-suffix"
            exit 1
          fi
          echo "✅ Version format valid: $VERSION"

      - name: Check if version exists on pub.dev
        run: |
          VERSION="${{ steps.extract-version.outputs.version }}"
          echo "Checking if version $VERSION already exists on pub.dev..."
          
          HTTP_CODE=$(curl -s -w "%{http_code}" -o /dev/null "https://pub.dev/api/packages/axeptio_sdk/versions/$VERSION")
          if [ "$HTTP_CODE" = "200" ]; then
            echo "⚠️ Version $VERSION already exists on pub.dev!"
            echo "This is a dry-run, so continuing for validation purposes."
          elif [ "$HTTP_CODE" = "404" ]; then
            echo "✅ Version $VERSION available for publishing"
          else
            echo "⚠️ Could not verify version availability (HTTP $HTTP_CODE)"
            echo "Continuing with dry-run validation..."
          fi

      - name: Update pubspec.yaml with release version
        run: |
          VERSION="${{ steps.extract-version.outputs.version }}"
          echo "Updating pubspec.yaml from release tag version: $VERSION"
          
          # Backup original pubspec.yaml
          cp pubspec.yaml pubspec.yaml.backup
          
          # Update version in pubspec.yaml
          sed -i "s/version: .*/version: $VERSION/" pubspec.yaml
          
          echo "✅ Updated pubspec.yaml to version: $VERSION"
          echo "Changes:"
          diff pubspec.yaml.backup pubspec.yaml || true
          
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: master
          flutter-version: 3.29.3
          cache: false 
      - name: Install dependencies
        run: flutter pub get
      - name: Analyze
        run: flutter analyze
      - name: Run tests
        run: flutter test
      - name: Check Publish Warnings (Dry Run)
        run: |
          VERSION="${{ steps.extract-version.outputs.version }}"
          echo "Running dry-run publish for version: $VERSION"
          dart pub publish --dry-run
      - name: Publish (Dry Run Only)
        uses: k-paxian/dart-package-publisher@v1.6
        with:
          accessToken: ${{ secrets.PUB_DEV_PUBLISH_ACCESS_TOKEN }}
          refreshToken: ${{ secrets.PUB_DEV_PUBLISH_REFRESH_TOKEN }}
          flutter: true
          skipTests: true
          dryRunOnly: true
          
      - name: Dry-run Summary
        run: |
          VERSION="${{ steps.extract-version.outputs.version }}"
          TAG_VERSION="${{ steps.determine-tag.outputs.tag }}"
          {
            echo "## 🧪 Dry-run Publish Summary"
            echo "✅ Package validation completed successfully for version **$VERSION**"
            echo ""
            echo "### Release Information"
            echo "- **Release Tag**: \`$TAG_VERSION\`"
            echo "- **Version**: \`$VERSION\`"
            echo "- **Validation Mode**: Dry-run (identical to publish workflow)"
            echo ""
            echo "### Validation Results"
            echo "✅ Release exists and is accessible"
            echo "✅ Version format validation passed"
            echo "✅ pub.dev version availability checked"
            echo "✅ pubspec.yaml updated from release tag"
            echo "✅ Flutter analysis passed"
            echo "✅ All tests passed"
            echo "✅ Package structure validation passed"
            echo "✅ Publishing credentials validated"
            echo ""
            echo "### Next Steps"
            echo "🚀 **Ready for production release!**"
            echo ""
            echo "\`\`\`bash"
            echo "# Manually trigger the publish workflow:"
            echo "gh workflow run publish.yml --field release_tag=$TAG_VERSION"
            echo "\`\`\`"
            echo ""
            echo "### Important Notes"
            echo "- This was a **dry-run only** - no actual publishing occurred"
            echo "- Both workflows use **identical logic** for consistency"
            echo "- Release tag \`$TAG_VERSION\` is ready for publishing"
          } >> "$GITHUB_STEP_SUMMARY"