name: Dry-run Publish to pub.dev

# This workflow performs a dry-run publish validation using a specified release tag
# Use this to validate a GitHub release before running the actual publish workflow
# Note: For actual releases, run the main publish workflow manually with the same tag

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag to validate (e.g., v2.0.16)'
        required: true
        type: string
      
jobs:
  dry-run-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Clone repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Check if release tag exists
        id: check-tag
        run: |
          TAG="${{ inputs.release_tag }}"
          if git rev-parse --verify "refs/tags/$TAG" >/dev/null 2>&1; then
            echo "tag_exists=true" >> "$GITHUB_OUTPUT"
            echo "✅ Release tag $TAG exists"
          else
            echo "tag_exists=false" >> "$GITHUB_OUTPUT" 
            echo "⚠️ Release tag $TAG does not exist yet - using current branch for validation"
          fi
          
      - name: Validate release tag for dry-run
        if: steps.check-tag.outputs.tag_exists == 'true'
        run: |
          echo "✅ Release tag ${{ inputs.release_tag }} exists and ready for validation"
          echo "Note: Dry-run validation uses current branch state, not the specific tag"
      
      - name: Extract version from release tag
        id: extract-version
        run: |
          TAG_VERSION="${{ inputs.release_tag }}"
          VERSION="${TAG_VERSION#v}"
          echo "Extracting version from release tag: $TAG_VERSION -> $VERSION"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          
      - name: Validate version format
        run: |
          VERSION="${{ steps.extract-version.outputs.version }}"
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\.\-]+)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z or X.Y.Z-suffix"
            exit 1
          fi
          echo "✅ Version format valid: $VERSION"

      - name: Validate Changelog Generation (Dry-run)
        run: |
          VERSION="${{ steps.extract-version.outputs.version }}"
          echo "Validating automated changelog generation for version: $VERSION"
          
          # Check if we have conventional commits to generate changelog from
          if git log --oneline --grep="^feat\|^fix\|^chore\|^docs\|^style\|^refactor\|^perf\|^test" --since="$(git describe --tags --abbrev=0 2>/dev/null || echo '1 month ago')" | head -5; then
            echo "✅ Found conventional commits for changelog generation"
          else
            echo "⚠️ No recent conventional commits found - changelog may be minimal"
          fi
          
          echo "✅ Changelog will be auto-generated during actual publish"

      - name: Check if version exists on pub.dev
        run: |
          VERSION="${{ steps.extract-version.outputs.version }}"
          echo "Checking if version $VERSION already exists on pub.dev..."
          
          HTTP_CODE=$(curl -s -w "%{http_code}" -o /dev/null "https://pub.dev/api/packages/axeptio_sdk/versions/$VERSION")
          if [ "$HTTP_CODE" = "200" ]; then
            echo "⚠️ Version $VERSION already exists on pub.dev!"
            echo "This is a dry-run, so continuing for validation purposes."
          elif [ "$HTTP_CODE" = "404" ]; then
            echo "✅ Version $VERSION available for publishing"
          else
            echo "⚠️ Could not verify version availability (HTTP $HTTP_CODE)"
            echo "Continuing with dry-run validation..."
          fi
          
      - name: Update pubspec.yaml with release version
        run: |
          VERSION="${{ steps.extract-version.outputs.version }}"
          echo "Updating pubspec.yaml from release tag version: $VERSION"
          
          # Backup original pubspec.yaml
          cp pubspec.yaml pubspec.yaml.backup
          
          # Update version in pubspec.yaml
          sed -i "s/version: .*/version: $VERSION/" pubspec.yaml
          
          echo "✅ Updated pubspec.yaml to version: $VERSION"
          echo "Changes:"
          diff pubspec.yaml.backup pubspec.yaml || true

      - name: Simulate Changelog Generation
        run: |
          VERSION="${{ steps.extract-version.outputs.version }}"
          echo "Simulating changelog generation for version: $VERSION"
          
          # Show what commits would be included in changelog
          echo "📋 Recent commits that would generate changelog entries:"
          git log --oneline --grep="^feat\|^fix\|^chore\|^docs\|^style\|^refactor\|^perf\|^test" --since="$(git describe --tags --abbrev=0 2>/dev/null || echo '1 month ago')" | head -10 || echo "No conventional commits found"
          
          echo "✅ During actual publish, changelog will be auto-generated from conventional commits"

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: master
          flutter-version: 3.29.3
          cache: false 
      - name: Install dependencies
        run: flutter pub get
      - name: Analyze
        run: flutter analyze
      - name: Run tests
        run: flutter test
      - name: Check Publish Warnings (Dry Run)
        run: |
          VERSION="${{ steps.extract-version.outputs.version }}"
          echo "Running dry-run publish for version: $VERSION"
          dart pub publish --dry-run
      - name: Publish (Dry Run Only)
        uses: k-paxian/dart-package-publisher@v1.6
        with:
          accessToken: ${{ secrets.PUB_DEV_PUBLISH_ACCESS_TOKEN }}
          refreshToken: ${{ secrets.PUB_DEV_PUBLISH_REFRESH_TOKEN }}
          flutter: true
          skipTests: true
          dryRunOnly: true
          
      - name: Dry-run Summary
        run: |
          VERSION="${{ steps.extract-version.outputs.version }}"
          {
            echo "## 🧪 Dry-run Publish Summary"
            echo "✅ Package validation completed successfully for version **$VERSION**"
            echo ""
            echo "### Validation Results"
            echo "✅ Version format validation passed"
            echo "✅ pub.dev version availability checked"
            echo "✅ Changelog generation validation passed"
            echo "✅ Flutter analysis passed"
            echo "✅ All tests passed"
            echo "✅ Package structure validation passed"
            echo "✅ Publishing credentials validated"
            echo ""
            echo "### Next Steps"
            if [ "${{ steps.check-tag.outputs.tag_exists }}" = "true" ]; then
              echo "🚀 **Ready for production release!**"
              echo "1. GitHub release already created with tag: \`${{ inputs.release_tag }}\`"
              echo "2. Run main publish workflow manually with same tag"
              echo "3. Package will be published to pub.dev"
            else
              echo "🚀 **Ready for release preparation!**"
              echo "1. Create GitHub release with tag: \`${{ inputs.release_tag }}\`"
              echo "2. Run this dry-run again with the created tag to validate"
              echo "3. Run main publish workflow manually with same tag"
            fi
            echo ""
            echo "### Important Notes"
            echo "- This was a **dry-run only** - no actual publishing occurred"
            echo "- **Changelog will be auto-generated** during actual publish from conventional commits"
            echo "- For production releases, run publish workflow manually"
            echo "- Validated release tag: \`${{ inputs.release_tag }}\`"
            if [ "${{ steps.check-tag.outputs.tag_exists }}" = "false" ]; then
              echo "- ⚠️ Tag does not exist yet - validated against current branch"
            fi
          } >> "$GITHUB_STEP_SUMMARY"